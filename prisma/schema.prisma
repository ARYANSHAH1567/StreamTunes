generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String          @id @default(uuid())
  email       String          @unique
  name        String          @default("Anonymous")
  provider    Provider
  role        Role
  sessions    StreamSession[] // user-hosted sessions
  upvotes     Upvote[]
}

model StreamSession {
  id        String   @id @default(uuid())
  code      String   @unique                     // public join code like "abc123"
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  streams   Stream[]
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)
}

model Stream {
  id          String         @id @default(uuid())
  sessionId   String         // Remove optional - every stream needs a session
  session     StreamSession  @relation(fields: [sessionId], references: [id])
  extractedId String         @default("")        // Remove @unique - multiple sessions can have same video
  type        StreamType
  url         String
  title       String         @default("")
  smallImg    String         @default("")
  bigImg      String         @default("")
  active      Boolean        @default(true)
  upvotes     Upvote[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Add compound unique constraint instead
  @@unique([sessionId, extractedId])
}

model Upvote {
  id        String   @id @default(uuid())
  userId    String
  streamId  String
  user      User     @relation(fields: [userId], references: [id])
  stream    Stream   @relation(fields: [streamId], references: [id])
  isUpvote  Boolean  @default(true)  // Add this to track upvote/downvote
  
  @@unique([userId, streamId]) // one vote per user per song
}

enum StreamType {
  Spotify
  Youtube
}

enum Role {
  Streamer
  EndUser
}

enum Provider {
  Google
}